/*
 * This file is generated by jOOQ.
 */
package world.good2go.db.jooq.tables


import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import world.good2go.db.jooq.Good2go
import world.good2go.db.jooq.keys.KEY_HELLOWORLD_PRIMARY
import world.good2go.db.jooq.tables.records.HelloworldRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Helloworld(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, HelloworldRecord>?,
    aliased: Table<HelloworldRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<HelloworldRecord>(
    alias,
    Good2go.GOOD2GO,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>good2go.HelloWorld</code>
         */
        val HELLOWORLD: Helloworld = Helloworld()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<HelloworldRecord> = HelloworldRecord::class.java

    /**
     * The column <code>good2go.HelloWorld.id</code>.
     */
    val ID: TableField<HelloworldRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>good2go.HelloWorld.name</code>.
     */
    val NAME: TableField<HelloworldRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<HelloworldRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<HelloworldRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>good2go.HelloWorld</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>good2go.HelloWorld</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>good2go.HelloWorld</code> table reference
     */
    constructor(): this(DSL.name("HelloWorld"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, HelloworldRecord>): this(Internal.createPathAlias(child, key), child, key, HELLOWORLD, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Good2go.GOOD2GO
    public override fun getIdentity(): Identity<HelloworldRecord, Int?> = super.getIdentity() as Identity<HelloworldRecord, Int?>
    public override fun getPrimaryKey(): UniqueKey<HelloworldRecord> = KEY_HELLOWORLD_PRIMARY
    public override fun `as`(alias: String): Helloworld = Helloworld(DSL.name(alias), this)
    public override fun `as`(alias: Name): Helloworld = Helloworld(alias, this)
    public override fun `as`(alias: Table<*>): Helloworld = Helloworld(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): Helloworld = Helloworld(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): Helloworld = Helloworld(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): Helloworld = Helloworld(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row2<Int?, String?> = super.fieldsRow() as Row2<Int?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
